// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: distributed/pb/coordinator.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Coordinator_RegisterWorker_FullMethodName   = "/distributed.Coordinator/RegisterWorker"
	Coordinator_UnregisterWorker_FullMethodName = "/distributed.Coordinator/UnregisterWorker"
	Coordinator_Heartbeat_FullMethodName        = "/distributed.Coordinator/Heartbeat"
	Coordinator_StartCheckpoint_FullMethodName  = "/distributed.Coordinator/StartCheckpoint"
	Coordinator_EndCheckpoint_FullMethodName    = "/distributed.Coordinator/EndCheckpoint"
)

// CoordinatorClient is the client API for Coordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinatorClient interface {
	// RegisterWorker allows a worker to join the cluster.
	RegisterWorker(ctx context.Context, in *RegisterWorkerRequest, opts ...grpc.CallOption) (*RegisterWorkerResponse, error)
	// UnregisterWorker allows a worker to leave the cluster.
	UnregisterWorker(ctx context.Context, in *UnregisterWorkerRequest, opts ...grpc.CallOption) (*UnregisterWorkerResponse, error)
	// Heartbeat is sent by workers to indicate that they are still alive.
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	// StartCheckpoint initiates a distributed checkpoint.
	StartCheckpoint(ctx context.Context, in *StartCheckpointRequest, opts ...grpc.CallOption) (*StartCheckpointResponse, error)
	// EndCheckpoint is called by workers to report the completion of a checkpoint.
	EndCheckpoint(ctx context.Context, in *EndCheckpointRequest, opts ...grpc.CallOption) (*EndCheckpointResponse, error)
}

type coordinatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinatorClient(cc grpc.ClientConnInterface) CoordinatorClient {
	return &coordinatorClient{cc}
}

func (c *coordinatorClient) RegisterWorker(ctx context.Context, in *RegisterWorkerRequest, opts ...grpc.CallOption) (*RegisterWorkerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterWorkerResponse)
	err := c.cc.Invoke(ctx, Coordinator_RegisterWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) UnregisterWorker(ctx context.Context, in *UnregisterWorkerRequest, opts ...grpc.CallOption) (*UnregisterWorkerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnregisterWorkerResponse)
	err := c.cc.Invoke(ctx, Coordinator_UnregisterWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, Coordinator_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) StartCheckpoint(ctx context.Context, in *StartCheckpointRequest, opts ...grpc.CallOption) (*StartCheckpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartCheckpointResponse)
	err := c.cc.Invoke(ctx, Coordinator_StartCheckpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) EndCheckpoint(ctx context.Context, in *EndCheckpointRequest, opts ...grpc.CallOption) (*EndCheckpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndCheckpointResponse)
	err := c.cc.Invoke(ctx, Coordinator_EndCheckpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinatorServer is the server API for Coordinator service.
// All implementations must embed UnimplementedCoordinatorServer
// for forward compatibility.
type CoordinatorServer interface {
	// RegisterWorker allows a worker to join the cluster.
	RegisterWorker(context.Context, *RegisterWorkerRequest) (*RegisterWorkerResponse, error)
	// UnregisterWorker allows a worker to leave the cluster.
	UnregisterWorker(context.Context, *UnregisterWorkerRequest) (*UnregisterWorkerResponse, error)
	// Heartbeat is sent by workers to indicate that they are still alive.
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	// StartCheckpoint initiates a distributed checkpoint.
	StartCheckpoint(context.Context, *StartCheckpointRequest) (*StartCheckpointResponse, error)
	// EndCheckpoint is called by workers to report the completion of a checkpoint.
	EndCheckpoint(context.Context, *EndCheckpointRequest) (*EndCheckpointResponse, error)
	mustEmbedUnimplementedCoordinatorServer()
}

// UnimplementedCoordinatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoordinatorServer struct{}

func (UnimplementedCoordinatorServer) RegisterWorker(context.Context, *RegisterWorkerRequest) (*RegisterWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorker not implemented")
}
func (UnimplementedCoordinatorServer) UnregisterWorker(context.Context, *UnregisterWorkerRequest) (*UnregisterWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterWorker not implemented")
}
func (UnimplementedCoordinatorServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedCoordinatorServer) StartCheckpoint(context.Context, *StartCheckpointRequest) (*StartCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCheckpoint not implemented")
}
func (UnimplementedCoordinatorServer) EndCheckpoint(context.Context, *EndCheckpointRequest) (*EndCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndCheckpoint not implemented")
}
func (UnimplementedCoordinatorServer) mustEmbedUnimplementedCoordinatorServer() {}
func (UnimplementedCoordinatorServer) testEmbeddedByValue()                     {}

// UnsafeCoordinatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinatorServer will
// result in compilation errors.
type UnsafeCoordinatorServer interface {
	mustEmbedUnimplementedCoordinatorServer()
}

func RegisterCoordinatorServer(s grpc.ServiceRegistrar, srv CoordinatorServer) {
	// If the following call pancis, it indicates UnimplementedCoordinatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Coordinator_ServiceDesc, srv)
}

func _Coordinator_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_RegisterWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).RegisterWorker(ctx, req.(*RegisterWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_UnregisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).UnregisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_UnregisterWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).UnregisterWorker(ctx, req.(*UnregisterWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_StartCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).StartCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_StartCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).StartCheckpoint(ctx, req.(*StartCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_EndCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).EndCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_EndCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).EndCheckpoint(ctx, req.(*EndCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Coordinator_ServiceDesc is the grpc.ServiceDesc for Coordinator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Coordinator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "distributed.Coordinator",
	HandlerType: (*CoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterWorker",
			Handler:    _Coordinator_RegisterWorker_Handler,
		},
		{
			MethodName: "UnregisterWorker",
			Handler:    _Coordinator_UnregisterWorker_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Coordinator_Heartbeat_Handler,
		},
		{
			MethodName: "StartCheckpoint",
			Handler:    _Coordinator_StartCheckpoint_Handler,
		},
		{
			MethodName: "EndCheckpoint",
			Handler:    _Coordinator_EndCheckpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "distributed/pb/coordinator.proto",
}
