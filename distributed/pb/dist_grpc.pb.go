// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: distributed/pb/dist.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DistributedService_AllReduce_FullMethodName = "/distributed.DistributedService/AllReduce"
	DistributedService_Barrier_FullMethodName   = "/distributed.DistributedService/Barrier"
	DistributedService_Broadcast_FullMethodName = "/distributed.DistributedService/Broadcast"
)

// DistributedServiceClient is the client API for DistributedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributedServiceClient interface {
	// AllReduce performs a single all-reduce operation on a tensor.
	AllReduce(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AllReduceRequest, AllReduceResponse], error)
	// Barrier provides a synchronization point for all workers.
	Barrier(ctx context.Context, in *BarrierRequest, opts ...grpc.CallOption) (*BarrierResponse, error)
	// Broadcast sends a tensor from the root to all other workers.
	Broadcast(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*BroadcastResponse, error)
}

type distributedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributedServiceClient(cc grpc.ClientConnInterface) DistributedServiceClient {
	return &distributedServiceClient{cc}
}

func (c *distributedServiceClient) AllReduce(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AllReduceRequest, AllReduceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DistributedService_ServiceDesc.Streams[0], DistributedService_AllReduce_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AllReduceRequest, AllReduceResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DistributedService_AllReduceClient = grpc.BidiStreamingClient[AllReduceRequest, AllReduceResponse]

func (c *distributedServiceClient) Barrier(ctx context.Context, in *BarrierRequest, opts ...grpc.CallOption) (*BarrierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BarrierResponse)
	err := c.cc.Invoke(ctx, DistributedService_Barrier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedServiceClient) Broadcast(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*BroadcastResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BroadcastResponse)
	err := c.cc.Invoke(ctx, DistributedService_Broadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributedServiceServer is the server API for DistributedService service.
// All implementations must embed UnimplementedDistributedServiceServer
// for forward compatibility.
type DistributedServiceServer interface {
	// AllReduce performs a single all-reduce operation on a tensor.
	AllReduce(grpc.BidiStreamingServer[AllReduceRequest, AllReduceResponse]) error
	// Barrier provides a synchronization point for all workers.
	Barrier(context.Context, *BarrierRequest) (*BarrierResponse, error)
	// Broadcast sends a tensor from the root to all other workers.
	Broadcast(context.Context, *BroadcastRequest) (*BroadcastResponse, error)
	mustEmbedUnimplementedDistributedServiceServer()
}

// UnimplementedDistributedServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDistributedServiceServer struct{}

func (UnimplementedDistributedServiceServer) AllReduce(grpc.BidiStreamingServer[AllReduceRequest, AllReduceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AllReduce not implemented")
}
func (UnimplementedDistributedServiceServer) Barrier(context.Context, *BarrierRequest) (*BarrierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Barrier not implemented")
}
func (UnimplementedDistributedServiceServer) Broadcast(context.Context, *BroadcastRequest) (*BroadcastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedDistributedServiceServer) mustEmbedUnimplementedDistributedServiceServer() {}
func (UnimplementedDistributedServiceServer) testEmbeddedByValue()                            {}

// UnsafeDistributedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributedServiceServer will
// result in compilation errors.
type UnsafeDistributedServiceServer interface {
	mustEmbedUnimplementedDistributedServiceServer()
}

func RegisterDistributedServiceServer(s grpc.ServiceRegistrar, srv DistributedServiceServer) {
	// If the following call pancis, it indicates UnimplementedDistributedServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DistributedService_ServiceDesc, srv)
}

func _DistributedService_AllReduce_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DistributedServiceServer).AllReduce(&grpc.GenericServerStream[AllReduceRequest, AllReduceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DistributedService_AllReduceServer = grpc.BidiStreamingServer[AllReduceRequest, AllReduceResponse]

func _DistributedService_Barrier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BarrierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedServiceServer).Barrier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributedService_Barrier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedServiceServer).Barrier(ctx, req.(*BarrierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedService_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedServiceServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributedService_Broadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedServiceServer).Broadcast(ctx, req.(*BroadcastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DistributedService_ServiceDesc is the grpc.ServiceDesc for DistributedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "distributed.DistributedService",
	HandlerType: (*DistributedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Barrier",
			Handler:    _DistributedService_Barrier_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _DistributedService_Broadcast_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AllReduce",
			Handler:       _DistributedService_AllReduce_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "distributed/pb/dist.proto",
}
