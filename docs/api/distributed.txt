package distributed // import "github.com/zerfoo/zerfoo/distributed"


TYPES

type AllReduceStrategy[T tensor.Numeric] struct {
	// Has unexported fields.
}
    AllReduceStrategy implements a more advanced AllReduce algorithm.

func NewAllReduceStrategy[T tensor.Numeric](
	localStrategy, crossNodeStrategy InternalStrategy[T],
) *AllReduceStrategy[T]
    NewAllReduceStrategy creates a new AllReduceStrategy.

func (s *AllReduceStrategy[T]) AllReduceGradients(gradients map[string]*tensor.Tensor[T]) error
    AllReduceGradients performs hierarchical all-reduce on gradients.

func (s *AllReduceStrategy[T]) Barrier() error
    Barrier synchronizes all workers across all nodes.

func (s *AllReduceStrategy[T]) BroadcastTensor(t *tensor.Tensor[T], rootRank int) error

func (s *AllReduceStrategy[T]) Init(rank int, size int, coordinatorAddress string) error
    Init initializes the hierarchical strategy.

func (s *AllReduceStrategy[T]) Rank() int
    Rank returns the rank from the local strategy.

func (s *AllReduceStrategy[T]) Shutdown()
    Shutdown gracefully closes all connections.

func (s *AllReduceStrategy[T]) Size() int
    Size returns the size from the local strategy.

type CoordinatorClient interface {
	RegisterWorker(ctx context.Context, in *pb.RegisterWorkerRequest, opts ...grpc.CallOption) (*pb.RegisterWorkerResponse, error)
	UnregisterWorker(ctx context.Context, in *pb.UnregisterWorkerRequest, opts ...grpc.CallOption) (*pb.UnregisterWorkerResponse, error)
	Heartbeat(ctx context.Context, in *pb.HeartbeatRequest, opts ...grpc.CallOption) (*pb.HeartbeatResponse, error)
}
    CoordinatorClient is an interface for a client of the coordinator service.

type Dialer func(ctx context.Context, target string) (*grpc.ClientConn, error)
    Dialer is a function that creates a gRPC client connection.

type DistributedServiceClientFactory func(cc *grpc.ClientConn) pb.DistributedServiceClient
    DistributedServiceClientFactory is a function that creates a new
    DistributedServiceClient.

type GrpcServer interface {
	RegisterService(desc *grpc.ServiceDesc, impl interface{})
	Serve(lis net.Listener) error
	Stop()
	GracefulStop()
}
    GrpcServer is an interface for a gRPC server.

type InternalStrategy[T tensor.Numeric] interface {
	// Init initializes the strategy.
	Init(rank int, size int, coordinatorAddress string) error
	// AllReduceGradients performs an all-reduce operation on the gradients.
	AllReduceGradients(gradients map[string]*tensor.Tensor[T]) error
	// Barrier blocks until all workers have reached the barrier.
	Barrier() error
	// BroadcastTensor broadcasts a tensor from the root to all other workers.
	BroadcastTensor(t *tensor.Tensor[T], rootRank int) error
	// Rank returns the rank of the current worker.
	Rank() int
	// Size returns the total number of workers.
	Size() int
	// Shutdown cleans up the resources used by the strategy.
	Shutdown()
}
    InternalStrategy defines the interface for a distributed training strategy.

type ListenerFactory func(network, address string) (net.Listener, error)
    ListenerFactory is a function that creates a new net.Listener.

type Logger interface {
	Printf(format string, v ...interface{})
}
    Logger is an interface for logging.

type NetworkManager interface {
	// ConnectToPeers establishes connections to all other workers in the cluster.
	ConnectToPeers(peers []string, selfRank int, timeout time.Duration) ([]pb.DistributedServiceClient, []*grpc.ClientConn, error)
	// CloseConnections closes all the given connections.
	CloseConnections(conns []*grpc.ClientConn)
}
    NetworkManager is an interface for managing network connections between
    workers.

func NewNetworkManager(dialer Dialer, clientFactory DistributedServiceClientFactory) NetworkManager

type ServerManager interface {
	Start(workerAddress string, service interface{}, serviceDesc *grpc.ServiceDesc) error
	Stop()
	GracefulStop()
	SetLogger(logger Logger)
}
    ServerManager is an interface for managing the gRPC server of a worker.

func NewServerManager(grpcServer GrpcServer, listenerFactory ListenerFactory) ServerManager

